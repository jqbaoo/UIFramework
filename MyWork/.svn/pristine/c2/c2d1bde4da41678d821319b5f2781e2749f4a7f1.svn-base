using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

namespace GameCore
{
    //UI管理类,用于管理所有的UI界面
    public class UIManager : UnitySingleton<UIManager>
    {
        //缓存所有打开过的窗体(已经加载过的窗体)
        private Dictionary<E_UiId, BaseUI> dicAllUI;
        //缓存正在显示的窗体
        private Dictionary<E_UiId, BaseUI> dicShowUI;

        //缓存刚显示出来的当前窗体
        private BaseUI currentUI=null;
        //缓存上一个窗体
        private BaseUI beforeUI = null;
        //private E_UiId beforeUiId = E_UiId.NullUI;

        //缓存画布
        private Transform canvas;
        //缓存画布下面的两个窗体父节点
        private Transform keepAboveUIRoot;
        private Transform normalUIRoot;

        private void Awake()
        {
           
            if (dicAllUI==null)
            {
                dicAllUI = new Dictionary<E_UiId, BaseUI>();
            }
            if (dicShowUI==null)
            {
                dicShowUI = new Dictionary<E_UiId, BaseUI>();
            }
            InitUIManager();
        }
        //初始化
        private void InitUIManager()
        {
            canvas = this.transform.parent;
            //切换场景德 时候,画布不被销毁
            DontDestroyOnLoad(canvas);
            if (keepAboveUIRoot==null)
            {
                keepAboveUIRoot = GameTool.FindTheChild(canvas.gameObject, "KeepAboveUIRoot");
            }
            if (normalUIRoot == null)
            {
                normalUIRoot = GameTool.FindTheChild(canvas.gameObject, "NormalUIRoot");
            }
            ShowUI(E_UiId.InforUI);
            ShowUI(E_UiId.MainUI);
        }
        //供外界调用,显示窗体的方法
        public void ShowUI(E_UiId uiId)
        {
            if (uiId==E_UiId.NullUI)
            {
                //uiId = E_UiId.MainUI;
                GameDebuger.LogError("显示窗体的时候传入了NullUI");
                return;
            }
            //判断
            JudgeShowUI(uiId);
        }
        private void JudgeShowUI(E_UiId uiId)
        {
            //1、将要显示的窗体是否正在显示,如果正在显示就不用处理其他逻辑了
            if (dicShowUI.ContainsKey(uiId))
            {
                return;
            }
            //2、判断将要显示的窗体是否加载过
            BaseUI baseUI = GetBaseUI(uiId);
            if (baseUI==null)//说明窗体没有被加载过
            {
                string path = GameDefine.dicPath[uiId];
                GameObject theUI = Resources.Load<GameObject>(path);
                if (theUI != null)//有加载到了
                {
                    //把窗体生成出来
                    GameObject willShowUI = Instantiate(theUI);
                    baseUI = willShowUI.GetComponent<BaseUI>();
                    //baseUI==null说明窗体上没有挂载UI脚本
                    if (baseUI==null)
                    {
                        //自动添加对应的UI脚本
                        Type type = GameDefine.GetUIScriptType(uiId);
                        //为窗体自动添加脚本
                        baseUI= willShowUI.AddComponent(type)as BaseUI;
                    }
                    //获取该窗体对应的父节点
                    Transform uiRoot = GetTheUIRoot(baseUI);
                    GameTool.AddChildToParent(uiRoot, willShowUI.transform);
                }
                else
                {
                    GameDebuger.LogError("在路径"+path+"下面加载不到窗体,请查看该路径下面是否有窗体"+ uiId+"的预制体");
                }

            }

        }
        //在dicAllUI里面获取窗体
        private BaseUI GetBaseUI(E_UiId uiId)
        {
            if (dicAllUI.ContainsKey(uiId))
            {
                return dicAllUI[uiId];
            }
            else
            {
                return null;
            }
        }
        //判断窗体父节点类型(UIRoot的类型)
        private Transform GetTheUIRoot(BaseUI baseUI)
        {
            if (baseUI.uiType.uiRootType == E_UIRootType.KeepAbove)
            {
                return keepAboveUIRoot;
            }
            else
            {
                return normalUIRoot;
            }
        }
    }

}
